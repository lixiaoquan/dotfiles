# Alias for moving around quickly
CURRENT_PROJECT=dli

# Set this to override root folder
PROJECT_ROOT=/LocalRun/xiaoquan.li

MODEL=/mercury/share/DLI/models
ONNX_MODEL=/mercury/share/DLI/onnx

adjust_environment () {

  PROJECT_BINARY=''
  PROJECT_SROUCE=''
  PROJECT_TEST=''
  PROJECT_DRIVER=''
  PROJECT_TVM=''

  if [ "$CURRENT_PROJECT" = "dli" ]; then
    echo ${PROJECT_ROOT}
    PROJECT_BINARY=${PROJECT_ROOT}/build-ai_software-Desktop-Debug
    PROJECT_SOURCE=${PROJECT_ROOT}/ai_software/
    PROJECT_TVM=${PROJECT_ROOT}/ai_software/compiler/tvm
    PROJECT_DRIVER=${PROJECT_ROOT}/ai_software/driver
    PROJECT_TEST=${PROJECT_ROOT}/ai_software/compiler/tvm/dl/tests/python
    PROJECT_DLNN=${PROJECT_ROOT}/ai_software/tensorflow/tensorflow_dlnn
  else
    echo 'CURRENT_PROJECT is not one of [dli], do nothing'
  fi

}

if alias bu 2>/dev/null; then
  unalias bu
fi

alias bu='
         func() {
            adjust_environment

            [ ! -z "$PROJECT_BINARY" ]; cd $PROJECT_BINARY
         }; func
         '

alias te='
         func() {
            adjust_environment

            [ ! -z "$PROJECT_TEST" ] && cd $PROJECT_TEST
         }; func
         '

alias sr='
          func() {
             adjust_environment

             [ ! -z "$PROJECT_SOURCE" ]; cd $PROJECT_SOURCE
          }; func
          '

alias tvm='
          func() {
             adjust_environment

             [ ! -z "$PROJECT_TVM" ]; cd $PROJECT_TVM
          }; func
          '

alias dr='
          func() {
             adjust_environment

             [ ! -z "$PROJECT_DRIVER" ]; cd $PROJECT_DRIVER
          }; func
          '

alias l='
          func() {
             adjust_environment

             [ ! -z "$PROJECT_BINARY" ]; vim -n $PROJECT_BINARY/dl.txt
          }; func
          '

to_cd_home () {
  scp $1 10.28.12.37:/home/xiaoquan.li
}

to_sh_home () {
  scp $1 10.21.12.17:/home/xiaoquan.li
}

alias s='git clean -fX; bsync -b /LocalRun/xiaoquan.li/ai_software/ orange:/LocalRun/xiaoquan.li/ai_software'
alias ss='git clean -fX; bsync /LocalRun/xiaoquan.li/ai_software/ orange:/LocalRun/xiaoquan.li/ai_software'
alias m='cd ${MODEL}'
alias o='cd ${ONNX_MODEL}'
alias re='cd /LocalRun/xiaoquan.li/software_develop/reg'
alias lsqemu="psg qemu"

# Build and install TensorFlow
alias btf='bazel build //tensorflow/tools/pip_package:build_pip_package --incompatible_remove_native_http_archive=false && ./bazel-bin/tensorflow/tools/pip_package/build_pip_package /LocalRun/xiaoquan.li/1.12_cpu_release/'
alias itf='pip install --no-deps --upgrade /LocalRun/xiaoquan.li/1.12_cpu_release/tensorflow-1.12.0-cp35-cp35m-linux_x86_64.whl'
alias ctf='scp /LocalRun/xiaoquan.li/1.12_cpu_release/tensorflow-1.12.0-cp35-cp35m-linux_x86_64.whl 10.28.12.210:/LocalRun/xiaoquan.li/1.12_cpu_release/'
alias modified_tf='. /LocalRun/xiaoquan.li/modified_tensorflow/bin/activate'

# Activate python virtualenv
penv() {
  if [ -d "/usr/local/cuda" ]; then
    . /mercury/tools/python/penv3.6.8_gpu/bin/activate
  else
    . /mercury/tools/python/penv3.6.8/bin/activate
  fi
}
alias prepare='penv; source ./activate.sh'
alias cmake='/mercury/utility/cmake-3.20.5-linux-x86_64/bin/cmake'

update_coc_extensions() {
  cd
  cd .config/coc
  rm -rf extensions
  tar zxvf /home/xiaoquan.li/coc_extensions.tar.gz
}
